<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sculptor_set</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ROOM CREATOR

var s = room_width;
var z = 0;
var i = 0;
var skip = 0;
cub = ds_list_create();
t[0] = background_create_color(2,2,c_gray);
t[1] = background_create_color(2,2,c_red);
t[2] = background_create_color(2,2,c_yellow);
t[3] = background_create_color(2,2,c_green);
t[4] = background_create_color(2,2,c_orange);
t[5] = background_create_color(2,2,c_olive);

ini_open("starter.ini");
ctrl_opt = ini_read_real("controls","start",000);
instance_create(ini_read_real("spawn",'x',0),
                ini_read_real("spawn",'z',0) + ini_read_real("spawn",'y',0)*(64+s),
                player);
player.qspin = ini_read_real("spawn",'q',1);
instance_create(x,y,camera);
ini_close();

repeat (1 + floorlv_b.instance_count)
{   repeat s/64
    {   repeat s/64
        {   b = collision_point(x,y,ground_b,false,true);
            if !b
                b = collision_point(x,y,stairs_b,false,true);
            if !b
            {   b = collision_point(x,y,player,false,true)
                if b skip = 1;
            }
            if !b
                b = collision_point(x,y-1,next_b,false,true);
            
            if b and point_in_rectangle(x+1,y+1,b.x,b.y,b.x+64,b.y+64)
            {   //Stairs
                if b.object_index == asset_get_index("stairs_b")
                {   r = collision_point(x+32,y,ort_b,false,true);
                    if r
                    {   var uh = r.image_xscale;
                        var r = r.image_angle/90;
                    }
                    else
                    {   var uh = 1;
                        var r = 0;
                    }
                    
                    q = collision_point(x,y+32,qspin_b,false,true);
                    if q
                    {   if !q.image_xscale
                            q = 6;
                        else switch q.image_angle
                        {   case 0:     q = 2; break;
                            case 90:    q = 4; break;
                            case 180:   q = 5; break;
                            case 270:   q = 3; break;
                        }
                    }
                    else
                        q = 1;
                    
                    switch r
                    {   case 0: switch q
                                {   case 1: r = 2; break;
                                    case 2: r = 3; break;
                                    case 3: r = 9; break;
                                    case 4: r = 8; break;
                                    case 5: r = 0; break;
                                    case 6: r = 0; break;
                                }
                                break;
                        case 1: switch q
                                {   case 1: r = 6; break;
                                    case 2: r = 10; break;
                                    case 3: r = 7; break;
                                    case 4: r = 4; break;
                                    case 5: r = 8; break;
                                    case 6: r = 5; break;
                                }
                                break;
                        case 2: switch q
                                {   case 1: r = 3; break;
                                    case 2: r = 1; break;
                                    case 3: r = 11; break;
                                    case 4: r = 10; break;
                                    case 5: r = 2; break;
                                    case 6: r = 1; break;
                                }
                                break;
                        case 3: switch q
                                {   case 1: r = 7; break;
                                    case 2: r = 11; break;
                                    case 3: r = 5; break;
                                    case 4: r = 6; break;
                                    case 5: r = 9; break;
                                    case 6: r = 4; break;
                                }
                                break;
                    }
                    
                    for (var j=0;j&lt;8;j++)
                    {   switch r
                        {   case 0:     b = instance_create(x,z*64,ground_b);
                                        b.z = y - z*(64 + s) + j*8;
                                        b.image_yscale = 0.125;
                                        b.elevation = 64 - j*8;
                                        if !uh and (j!=2)
                                            b.elevation /= 8 - j;
                                        break;
                                        
                            case 1:     b = instance_create(x,z*64,ground_b);
                                        b.z = y - z*(64 + s) + j*8;
                                        b.image_yscale = 0.125;
                                        b.elevation = 8 + j*8;
                                        if !uh and (j!=1)
                                            b.elevation /= 1 + j;
                                        break;
                                        
                            case 2:     b = instance_create(x,z*64 + j*8,ground_b);
                                        b.z = y - z*(64 + s) + j*8;
                                        b.image_yscale = 0.125;
                                        b.elevation = 64 - j*8;
                                        if !uh and (j!=2)
                                            b.elevation /= 8 - j;
                                        break;//STANDARD N
                                        
                            /*2case 3:     b = instance_create(x,z*64 + j*16,ground_b);
                                        b.z = y - z*(64 + s) + j*16;
                                        b.image_xscale = 1;
                                        b.image_yscale = 0.25;
                                        b.elevation = 16 + j*16;
                                        break;//HOLLOWED VERSION*/
                            case 3:     b = instance_create(x,z*64 + 8*(7-j),ground_b);
                                        b.z = y - z*(64 + s) + j*8;
                                        b.image_yscale = 0.125;
                                        b.elevation = 8 + j*8;
                                        if !uh// and (j!=1)
                                            b.elevation /= 1 + j;
                                        break;//STANDARD S
                                        
                            case 4:     b = instance_create(x + j*8,z*64,ground_b);
                                        b.z = y - z*(64 + s);
                                        b.image_xscale = 0.125;
                                        b.elevation = 64 - j*8;
                                        if !uh and (j!=2)
                                            b.elevation /= 8 - j;
                                        break;
                                        
                            case 5:     b = instance_create(x + j*8,z*64,ground_b);
                                        b.z = y - z*(64 + s);
                                        b.image_xscale = 0.125;
                                        b.elevation = 8 + j*8;
                                        if !uh and (j!=1)
                                            b.elevation /= 1 + j;
                                        break;
                                        
                            case 6:     b = instance_create(x + j*8,z*64 + j*8,ground_b);
                                        b.z = y - z*(64 + s);
                                        b.image_xscale = 0.125;
                                        b.elevation = 64 - j*8;
                                        if !uh and (j!=2)
                                            b.elevation /= 8 - j;
                                        break;//STANDARD W
                                        
                            case 7:     b = instance_create(x + j*8,z*64 + 8*(7-j),ground_b);
                                        b.z = y - z*(64 + s);
                                        b.image_xscale = 0.125;
                                        b.elevation = 8 + j*8;
                                        if !uh and (j!=1)
                                            b.elevation /= 1 + j;
                                        break;//STANDARD E
                                        
                            case 8:     b = instance_create(x + j*8,z*64,ground_b);
                                        b.z = y - z*(64 + s);
                                        b.image_xscale = 0.125;
                                        b.image_yscale = 1 - j*0.125;
                                        b.elevation = 64;
                                        if !uh and (j!=2)
                                            b.image_yscale /= 1 + j;//?
                                        break;
                                        
                            case 9:     b = instance_create(x + j*8,z*64,ground_b);
                                        b.z = y - z*(64 + s);
                                        b.image_xscale = 0.125;
                                        b.image_yscale = 0.125 + j*0.125;
                                        b.elevation = 64;
                                        if !uh and (j!=1)
                                            b.image_yscale /= 1 + j;//?
                                        break;
                                        
                            case 10:    b = instance_create(x + j*8,z*64,ground_b);
                                        b.z = y - z*(64 + s) + j*8;
                                        b.image_xscale = 0.125;
                                        b.image_yscale = 1 - j*0.125;
                                        b.elevation = 64;
                                        if !uh and (j!=2)
                                            b.image_yscale /= 1 + j;//?
                                        break;
                                        
                            case 11:    b = instance_create(x + j*8,z*64,ground_b);
                                        b.z = y - z*(64 + s) + 8*(7-j);
                                        b.image_xscale = 0.125;
                                        b.image_yscale = 0.125 + j*0.125;
                                        b.elevation = 64;
                                        if !uh and (j!=1)
                                            b.image_yscale /= 1 + j;//?
                                        break;
                        }
                        //b.skin = c_gray;
                        var e = i;
                        e[0,0] = b.x;
                        e[0,1] = b.x + b.sprite_width;
                        e[1,0] = b.z;
                        e[1,1] = b.z + b.sprite_height;
                        e[2,0] = b.y;
                        e[2,1] = b.y + b.elevation;
                        e[3] = b;
                        ds_list_add(cub,e);
                        i++;
                    }
                }
                
                //Next room
                else if b.object_index == asset_get_index("next_b")
                {   b.x = x;
                    b.z = y - z*(64 + s);
                    b.y = z * 64;
                    b.elevation = 64;
                    //b.skin = c_olive;
                    b.nx = round(frac(b.image_xscale) * 6400);
                    b.nz = round(frac(b.image_yscale) * 6400);
                    b.ny = round(b.image_alpha * 255 - 100);
                    b.rm = 'r' + string_replace(string(b.image_angle),'.','_');
                    var e = i;
                    e[0,0] = b.x;
                    e[0,1] = b.x + 64;
                    e[1,0] = b.z;
                    e[1,1] = b.z + 64;
                    e[2,0] = b.y;
                    e[2,1] = b.y + b.elevation;
                    e[3] = b;
                    ds_list_add(cub,e);
                    i++;
                }
                
                //Ground and player
                else
                {   b.x = x;
                    b.z = y - z*(64 + s);
                    b.y = z * 64;
                    b.elevation = 64;
                    if !skip
                    {   //b.skin = c_gray;
                        var e = i;
                        e[0,0] = b.x;
                        e[0,1] = b.x + b.sprite_width;
                        e[1,0] = b.z;
                        e[1,1] = b.z + b.sprite_height;
                        e[2,0] = b.y;
                        e[2,1] = b.y + b.elevation;
                        e[3] = b;
                        ds_list_add(cub,e);
                        i++;
                    }
                }
            }
            x += 64;
            skip = 0;
        }
        x = 0
        y += 64;
    }
    y += 64;
    z += 1;
}
show_debug_message(ds_list_size(cub));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG

var ctrl_old = ctrl_opt;
if keyboard_check_pressed(ord('1'))
    ctrl_opt ^= 1;
if keyboard_check_pressed(ord('2'))
    ctrl_opt ^= 2;
if keyboard_check_pressed(ord('3'))
    ctrl_opt ^= 4;
if keyboard_check_pressed(ord('4'))
    show_message("How to play...
                  Move around the world to explore and find stuff.
                  Use your power to flip the world around on green blocks.
                  
                  Controls...
                  Movement: L Analog / WASD
                  Camera:   R Analog / Arrows
                  Zoom:     Back Triggers / ZX
                  Flip:     Front Triggers / QE");

if ctrl_old != ctrl_opt
{   ini_open("starter.ini");
    ini_write_real("controls","start",ctrl_opt);
    ini_close();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SHOW DEBUG

d3d_set_lighting(false);
d3d_set_culling(false);

//Main surface capture
var hud_w = display_get_gui_width();
var hud_h = display_get_gui_height();
//var hud_s = min(hud_w,hud_h) * 0.8;
if surface_get_width(application_surface) != hud_w
or surface_get_height(application_surface) != hud_h
{   surface_resize(application_surface,hud_w,hud_h);
    /*if surface_exists(surf0)
        surface_resize(surf0,hud_w,hud_h);
    else
    {   surf0 = surface_create(hud_w,hud_h);
        surface_set_target(surf0);
        draw_clear_alpha(0,1);
        draw_text_color(hud_w/2,hud_h/2,
                        "why would you resize?",
                        c_red,c_blue,c_yellow,c_green,1);
        surface_reset_target();
    }*/
}

if ctrl_opt&amp;1
    var c_opt = "Gamepad";
else
    var c_opt = "Keyboard";
if ctrl_opt&amp;2
    var x_opt = "Inverted x-axis";
else
    var x_opt = "Normal x-axis";
if ctrl_opt&amp;4
    var y_opt = "Inverted y-axis";
else
    var y_opt = "Normal y-axis";

//d3d_draw_ellipsoid(hud_w*0.4,hud_h*0.4,0,hud_w*0.6,hud_h*0.6,0,2,0,0,12);
//d3d_draw_ellipsoid(hud_w*0.6,hud_h*0.6,-10,hud_w*0.4,hud_h*0.4,10,2,0,0,12);
draw_text_color(hud_w*0.02,hud_h*0.75,"1: " + c_opt,c_fuchsia,c_fuchsia,c_fuchsia,c_fuchsia,1);
draw_text_color(hud_w*0.02,hud_h*0.80,"2: " + x_opt,c_fuchsia,c_fuchsia,c_fuchsia,c_fuchsia,1);
draw_text_color(hud_w*0.02,hud_h*0.85,"3: " + y_opt,c_fuchsia,c_fuchsia,c_fuchsia,c_fuchsia,1);
draw_text_color(hud_w*0.02,hud_h*0.90,"4: Help",c_fuchsia,c_fuchsia,c_fuchsia,c_fuchsia,1);

d3d_set_lighting(true);
d3d_set_culling(true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
