<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SCENE SETUP

d3d_start();
d3d_set_hidden(true);
//d3d_set_zwriteenable(false);
d3d_set_culling(true);
d3d_set_lighting(true);
d3d_light_define_direction(1, 0, -1, -1, c_white);
d3d_light_define_direction(2, 0, 1, -1, c_white);
d3d_light_enable(1, true);
d3d_light_enable(2, true);
texture_set_interpolation(true);

//Camera controls
mouse_direction = ini_read_real("camera",'m',0);
zview = ini_read_real("camera",'z',-5);
dist = ini_read_real("camera",'d',900);
cc = 0;
xup = 0;
yup = -1;
zup = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>camera</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CAMERA

draw_set_color(c_white);
//PS3 camera controls
if sculptor.ctrl_opt&amp;1
{   if (abs(point_distance(0,0,gamepad_axis_value(0,gp_axisrh),
            gamepad_axis_value(0,gp_axisrv))) &gt; 0.2)
    {   mouse_direction += gamepad_axis_value(0,gp_axisrh) * 3
                           * (!(sculptor.ctrl_opt&amp;2)*2-1);
        zview2 = gamepad_axis_value(0,gp_axisrv) * 3
                 * (!(sculptor.ctrl_opt&amp;4)*2-1);
        zview += zview2;
    }
    dist += gamepad_button_value(0,gp_shoulderlb) * 12.5;
    dist -= gamepad_button_value(0,gp_shoulderrb) * 12.5;
}
else
{   mouse_direction += (keyboard_check(vk_right)-keyboard_check(vk_left)) * 3
                       * (!(sculptor.ctrl_opt&amp;2)*2-1);
    zview2 = (keyboard_check(vk_down)-keyboard_check(vk_up)) * 3
             * (!(sculptor.ctrl_opt&amp;4)*2-1);
    zview += zview2;
    dist += keyboard_check(ord('Z')) * 12.5;
    dist -= keyboard_check(ord('X')) * 12.5;
}

cc = cos(zview*pi/180);
if cc &lt;= 0.1
    zview -= zview2;
var target_x = player.x + player.sq/2;
var target_y = player.y + player.sq/2;
var target_z = player.z + player.sq/2;
var hc = 0;
var ht = 0;

switch player.qspin
{   case 1:     xup = lengthdir_x(1,90+180);
                yup = -1;
                zup = lengthdir_y(1,0+180);
                var cx = sin(mouse_direction*pi/180)*cc;
                var cy = sin(zview*pi/180);
                var cz = cos(mouse_direction*pi/180)*cc;
                break;
                
    case 2:     xup = 0;
                yup = 0;
                zup = -1;
                var cx = cos(mouse_direction*pi/180)*cc;
                var cy = sin(mouse_direction*pi/180)*cc;
                var cz = sin(zview*pi/180);
                break;
                
    case 3:     xup = -1;
                yup = 0;
                zup = 0;
                var cx = sin(zview*pi/180);
                var cy = cos(mouse_direction*pi/180)*cc;
                var cz = sin(mouse_direction*pi/180)*cc;
                break;
                
    case 4:     xup = 1;
                yup = 0;
                zup = 0;
                var cx = -sin(zview*pi/180);
                var cy = sin(mouse_direction*pi/180)*cc;
                var cz = cos(mouse_direction*pi/180)*cc;
                break;
                
    case 5:     xup = 0;
                yup = 0;
                zup = 1;
                var cx = sin(mouse_direction*pi/180)*cc;
                var cy = cos(mouse_direction*pi/180)*cc;
                var cz = -sin(zview*pi/180);
                break;
                
    case 6:     xup = 0;
                yup = 1;
                zup = 0;
                var cx = cos(mouse_direction*pi/180)*cc;
                var cy = -sin(zview*pi/180);
                var cz = sin(mouse_direction*pi/180)*cc;
                break;
}

var cam_x = target_x + cx*dist;
var cam_y = target_y + cy*dist - hc;
var cam_z = target_z + cz*dist;
d3d_set_projection(cam_x,cam_y,cam_z,target_x,target_y-ht,target_z,xup,yup,zup);
player.cam_x = (cam_x+target_x)*0.5;
player.cam_y = (cam_y+target_y)*0.5;
player.cam_z = (cam_z+target_z)*0.5;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
